using System;
using System.IO;
using System.Reflection;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
//using System.Data.SqlClient;
//Microsoft.Data.SqlClient the new api for ms db's
//https://mariadb.com/kb/en/mariadb-and-net/ // Question and answer.
//https://docs.microsoft.com/en-us/azure/mysql/connect-csharp // good tutorial for starting up.
//https://mysqlconnector.net/ mit project for ado.net connectivity.

using Play.Interfaces.Embedding; 
using Play.Edit;
using Play.Integration;
using Play.Parse.Impl.Text;
using Play.Parse.Impl;
//using MySql.Data.MySqlClient;

namespace Play.MorsePractice {
    public class CallsDoc : Editor {
        public CallsDoc( IPgBaseSite oSite ) : base( oSite ) { }

		public override WorkerStatus PlayStatus {
			get { return( WorkerStatus.BUSY ); }
		}
    }

	public class MorseDoc:
		IPgParent,
		IPgLoad<TextReader>,
		IPgSave<TextWriter>,
        IPgTableDocument,
        IDisposable
	{
        readonly IPgScheduler      _oScheduler;
        readonly IPgRoundRobinWork _oTaskPlace;
        readonly IPgRoundRobinWork _oTaskSched;

        protected class MorseDocSlot :
			IPgBaseSite
		{
			protected readonly MorseDoc _oHost;

			public MorseDocSlot( MorseDoc oHost ) {
				_oHost = oHost ?? throw new ArgumentNullException();
			}

			public IPgParent Host => _oHost;

			public void LogError(string strMessage, string strDetails, bool fShow=true) {
				_oHost.LogError( strMessage, strDetails, fShow );
			}

			public void Notify( ShellNotify eEvent ) {
			}
		}

		readonly string      _strMorseTable = @"Play.MorsePractice.Content.international-morse-code.txt";
		readonly IPgBaseSite _oSiteBase;

        // Stuff for the morse code pracice view.
		public Editor   Source { get; } // practice code tones generated from this editor.
		public Editor   Notes  { get; } // practice screen notes. and primary view.
		public Editor   Stats  { get; } // put stats or more audio reference here.
		public Editor   Morse  { get; } // Our reference to the morse values. Let's make this audio!!
        public CallsDoc Calls  { get; }

        public Editor CallSign        { get; }
        public Editor CallSignBio     { get; } // Text generated by walking the html stream.
        public Editor CallSignAddress { get; } // This is the mailing address displayed.
        public Editor CallSignBioHtml { get; } // base 64 converted HTML streaml;
        public Editor CallSignPageHtml{ get; } // This is the main page returned by qrz.


        /// <summary>
        /// Document object for a little Morse Practice document.
        /// </summary>
        public MorseDoc( IPgBaseSite oSiteBase ) {
			_oSiteBase  = oSiteBase ?? throw new ArgumentNullException();
            _oScheduler = Services as IPgScheduler ?? throw new ArgumentException("Host requries IPgScheduler");
            _oTaskPlace = _oScheduler.CreateWorkPlace() ?? throw new InvalidOperationException("Couldn't create a worksite from scheduler for file downloader.");
            _oTaskSched = _oScheduler.CreateWorkPlace() ?? throw new ApplicationException( "Couldnt' create a worksite from scheduler for schedule.");

            Source           = new Editor( new MorseDocSlot( this ) );
			Notes            = new Editor( new MorseDocSlot( this ) );
			Stats            = new Editor( new MorseDocSlot( this ) );
			Morse            = new Editor( new MorseDocSlot( this ) );
            Calls            = new CallsDoc( new MorseDocSlot( this ) );
            CallSign         = new Editor( new MorseDocSlot( this ) );
            CallSignPageHtml = new Editor( new MorseDocSlot( this ) );
            CallSignBioHtml  = new Editor( new MorseDocSlot( this ) );
            CallSignBio      = new Editor( new MorseDocSlot( this ) );
            CallSignAddress  = new Editor( new MorseDocSlot( this ) );

            new ParseBioHTMLSkimmer( this );
            new ParseQrzHTMLSkimmer( this );
            new ParseHandlerText   ( Notes,       "text" );
            new ParseHandlerText   ( Calls,       "text" );
            new ParseHandlerText   ( CallSign,    "text" );
            new ParseHandlerText   ( CallSignBio, "text" );
        }

        private bool _fDisposed = false;

		public void Dispose() {
			if( !_fDisposed ) {
				Source.Dispose();
				Notes .Dispose();
				Stats .Dispose();
                Morse .Dispose();
                Calls .Dispose();

                CallSign        .Dispose();
                CallSignPageHtml.Dispose();
                CallSignBio     .Dispose();
                CallSignBioHtml .Dispose();
                CallSignAddress .Dispose();

                _fDisposed = true;
			}
		}

		protected void LogError( string strMessage, string strDetails, bool fShow = false ) {
			_oSiteBase.LogError( strMessage, strDetails, fShow );
		}

		public bool      IsDirty   => Notes.IsDirty; // || Sources.IsDirty;
		public IPgParent Parentage => _oSiteBase.Host;
		public IPgParent Services  => Parentage.Services;

        public ICollection<ICollection<Line>> Rows { get; } = new List<ICollection<Line>>();

        /// <summary>
        /// Load Morse code reference text.
        /// </summary>
        /// <remarks>Not likely to fail once get working. So no return value.</remarks>
        protected void LoadMorse() { 
            Assembly oAssembly = Assembly.GetExecutingAssembly();

			try {
				using( Stream oStream = oAssembly.GetManifestResourceStream( _strMorseTable )) {
					using( TextReader oText = new StreamReader( oStream, true ) ) {
						Morse.Load( oText );
					}
				}
			} catch( Exception oEx ) {
				Type[] rgErrors = { typeof( NullReferenceException ), 
									typeof( ArgumentNullException ),
									typeof( ArgumentException ),
									typeof( FileLoadException ),
									typeof( BadImageFormatException ),
									typeof( NotImplementedException ) };
				if( rgErrors.IsUnhandled( oEx ) )
					throw;
			}
		}

		protected bool Initialize() {
			if( !Source.InitNew() )
				return false;
			if( !Notes.InitNew() )
				return false;
            if( !Calls.InitNew() )
                return false;

            // Note: Change this to trigger after a notes parse.
            //_oTaskSched.Queue( EnumCallsScanTask(), 3000 );
            Notes.BufferEvent += Notes_BufferEvent;

            if( !CallSign.InitNew())
                return false;
            if( !CallSignPageHtml.InitNew() )
                return false;
            if( !CallSignBioHtml.InitNew())
                return false;
            if( !CallSignBio.InitNew() )
                return false;
            if( !CallSignAddress.InitNew() )
                return false;
			if( !Stats.InitNew() )
				return false;

            for( int i=0; i<3; ++i ) {
                List<Line> rgRow = new List<Line>(7);

                for( int j=0; j<7; ++j ) {
                    rgRow.Add( new TextLine( j, j.ToString() ) );
                }
                Rows.Add( rgRow );
            }

            LoadMorse();
         // LoadStats(); We'll load the stats table here, it'll double as an audio reference.

			return true;
		}

        private void Notes_BufferEvent( BUFFEREVENTS eEvent ) {
            if( eEvent == BUFFEREVENTS.FORMATTED ) {
                ScanCallsigns();
            }
        }

        public bool InitNew() {
			if( !Initialize() ) 
				return false;

			return true;
		}

		public bool Load(TextReader oStream) {
			if( !Initialize() ) 
				return false;
			if( !Notes.Load( oStream ) )
				return false;

			return true;
		}

		public bool Save(TextWriter oStream) {
            Notes.Save( oStream );

            return true;
		}

        public void ScanCallsigns() {
            Calls.Clear();
            List< string > rgCallSigns = new List<string>();

            try {
                foreach( Line oLine in Notes ) {
                    foreach( IPgWordRange oWord in oLine.Formatting ) {
                        if( string.Compare( oWord.StateName, "callsign" ) == 0 && oWord.Offset == 0 ) {
                            rgCallSigns.Add( oLine.SubString( oWord.Offset, oWord.Length ) );
                        }
                    }
                }
                IEnumerable<IGrouping<string, string>> dupes = rgCallSigns.GroupBy(x => x.ToLower() ).OrderBy( y => y.Key.ToLower() );

                foreach( IGrouping<string, string> foo in dupes ) {
                    Calls.LineAppend( foo.Key + " : " + foo.Count().ToString() );
                }
                Calls.LineInsert( "Operator Count : " + dupes.Count().ToString() );
            } catch( Exception oEx ) {
                Type[] rgErrors = { typeof( NullReferenceException ),
                                    typeof( ArgumentNullException ),
                                    typeof( InvalidCastException ) };
                if( rgErrors.IsUnhandled( oEx ) )
                    throw;
            }
        }

        public IEnumerator<int> EnumCallsScanTask() {
            int iTimeInMs = 1000 * 60;
            while( true ) {
                ScanCallsigns();
                yield return iTimeInMs;
            }
        }

        public static async void test() {
            //var builder = new MySqlConnectionStringBuilder
            //{
            //    Server = "YOUR-SERVER.mysql.database.azure.com",
            //    Database = "YOUR-DATABASE",
            //    UserID = "USER@YOUR-SERVER",
            //    Password = "PASSWORD",
            //    SslMode = MySqlSslMode.Required,
            //};

            //using (var conn = new MySqlConnection(builder.ConnectionString))
            //{
            //    Console.WriteLine("Opening connection");
            //    await conn.OpenAsync();

            //    using (var command = conn.CreateCommand())
            //    {
            //        command.CommandText = "SELECT * FROM inventory;";

            //        using (var reader = await command.ExecuteReaderAsync())
            //        {
            //            while (await reader.ReadAsync())
            //            {
            //                Console.WriteLine(string.Format(
            //                    "Reading from table=({0}, {1}, {2})",
            //                    reader.GetInt32(0),
            //                    reader.GetString(1),
            //                    reader.GetInt32(2)));
            //            }
            //        }
            //    }

            //    Console.WriteLine("Closing connection");
            //}

            //Console.WriteLine("Press RETURN to exit");
            //Console.ReadLine();
        }

        static readonly HttpClient client = new HttpClient();

        public IEnumerator<int> EnumWatchTask(Task<HttpResponseMessage> oTask)
        {
            Task<Stream> oTask3 = null;

            while (oTask != null) {
                switch (oTask.Status) {
                    case TaskStatus.RanToCompletion:
                        oTask3 = oTask.Result.Content.ReadAsStreamAsync();
                        oTask.Dispose();
                        oTask = null;
                        break;
                    case TaskStatus.Faulted:
                    case TaskStatus.Canceled:
                        CallSignBioHtml.Clear();
                        CallSignBioHtml.LineAppend("Task Faulted: " + oTask.Exception.ToString());
                        oTask.Dispose();
                        yield break;
                    default:
                        yield return 250;
                        break;
                }
            }

            Stream oStream = null;

            while (oTask3 != null) {
                switch (oTask3.Status) {
                    case TaskStatus.RanToCompletion:
                        oStream = oTask3.Result;
                        oTask3.Dispose();
                        oTask3 = null;
                        break;
                    case TaskStatus.Faulted:
                    case TaskStatus.Canceled:
                        oTask3.Dispose();
                        yield break;
                    default:
                        yield return 250;
                        break;
                }
            }

            bool fLoaded = false;

            try { 
                using (StreamReader oReadQrz = new StreamReader(oStream, Encoding.UTF8, true, 1024, true )) {
                    // Just look for the first base64.decode and that should be it.
                    // Kind of gross to be burning strings. But it'll do in a pinch.
                    // Note: Looks like we assume the base64 blob is all on one line!
                    while (oReadQrz.Peek() >= 0) {
                        string strLine = oReadQrz.ReadLine();
                        string strSrch = "Base64.decode(\"";
                        int iStart = strLine.LastIndexOf(strSrch);
                        int iEnd = strLine.LastIndexOf("\"");

                        if (iStart > 0) {
                            byte[] rgBiography = null;
                            iStart += strSrch.Length;
                            if (iEnd > iStart + 20) { // Just an arbitrary extra.
                                try {
                                    rgBiography = Convert.FromBase64String(strLine.Substring(iStart, iEnd - iStart));
                                    MemoryStream stmBio = new MemoryStream(rgBiography);
                                    using (StreamReader oFoo = new StreamReader(stmBio)) {
                                        fLoaded = CallSignBioHtml.Load(oFoo);
                                    }
                                } catch (Exception oEx) {
                                    Type[] rgErrors = { typeof( ArgumentNullException ),
                                                        typeof( FormatException ) };
                                    if( rgErrors.IsUnhandled( oEx ))
                                        throw;
                                    // FromBase64String actually throws more exception types than documented. 
                                }
                            }
                            break;
                        }
                    }
                }
                oStream.Seek( 0, SeekOrigin.Begin );
                using (StreamReader oReadQrz = new StreamReader(oStream)) {
                    CallSignPageHtml.Load( oReadQrz );
                }
            } catch( Exception oEx ) {
                Type[] rgErrors = { typeof( ArgumentException ),
                                    typeof( NullReferenceException ),
                                    typeof( ArgumentNullException ),
                                    typeof( ObjectDisposedException ) };
                if( rgErrors.IsUnhandled( oEx ))
                    throw;

                oStream.Close();
            }

            if (!fLoaded) {
                PageReset();

                CallSignBio.Load("No Biography");
            }
        }

        protected void PageReset() {
            CallSignPageHtml.Clear();
            CallSignBioHtml .Clear();
            CallSignBio     .Clear();
            CallSignAddress .Clear();
        }

        /// <summary>
        /// New code to read the qrz station page. Not finished yet.
        /// </summary>
        public bool StationRead( Stream oStream ) {
            try { 
                Editor oTempEdit = new Editor( null );

                using( TextReader oReader = new StreamReader( oStream )) { 
                    if( !oTempEdit.Load( oReader ) ) { 
                        _oSiteBase.LogError( "Editor Load", "Could not read stream.", true );
                        return false;
                    }
                };
            } catch( Exception oEx ) { 
                Type[] rgErrors = { typeof( NullReferenceException),
                                    typeof( ArgumentException ),
                                    typeof( ArgumentNullException ) };
                if( rgErrors.IsUnhandled( oEx ))
                    throw;
            }

            return true;
        }

        public void StationLoad( string strCallsign ) { 
            CallSign.Clear();
            CallSign.Load( strCallsign );

            StationLoad();
        }

        public void StationLoad() {
            string strURL = "https://www.qrz.com/lookup";
            string strMediaType = "application/x-www-form-urlencoded";

            ServicePointManager.SecurityProtocol =
                SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

            StringBuilder oQuery = new StringBuilder();

            oQuery.Append("tquery=");
            oQuery.Append(CallSign[0]);
            oQuery.Append("&mode=callsign");

            if (_oTaskPlace.Status == WorkerStatus.FREE) {
                try {
                    StringContent oContent = new StringContent(oQuery.ToString(), System.Text.Encoding.UTF8, strMediaType);
                    Task<HttpResponseMessage> oTask = client.PostAsync(strURL, oContent);
                    _oTaskPlace.Queue(EnumWatchTask(oTask), 100);
                } catch (HttpRequestException) {
                    PageReset();

                    CallSignBio.LineAppend("Unable to process request");
                    return;
                }
            }
        }

        public void TableListenerAdd(IPgTableEvents oEvent) {
        }

        public void TableListenerRemove(IPgTableEvents oEvent) {
        }
    }

    /// <summary>
    /// Parse the converted base64 HTML blob, CallSignSource, that we skimmed from the main document.
    /// </summary>
    public class ParseBioHTMLSkimmer : ParseHandlerHTML {
        MorseDoc Document { get; }

        Editor   Bio => Document.CallSignBio;

        public ParseBioHTMLSkimmer( MorseDoc oDocument ) : 
            base( oDocument.CallSignBioHtml ) 
        {
            Document = oDocument ?? throw new ArgumentNullException( "Document must not be null" );
        }

        /// <summary>
        /// The biography is a base64 blob we pull out of the main text. After it's parsed, we walk the collection
        /// to grab the text between the tags. It's sort of a crude text browser!! We don't actually parse the
        /// tag stream in this subclass we just walk it looking for text to stuff in our editor.
        /// </summary>
        public override void PassTwo() {
            try {
                Bio.Clear();

                if ( _rgTagBag.Count < 1 )
                    return;

                TagInfo       oLastTag       = _rgTagBag[0];
                string[]      rgLineBreakers = { "<p>", "<li>", "<br>", "<h1>", "<h2>", "<h3>", "<h4>" };
                string[]      rgLineBlocks   = { "<p>", "<h1>", "<h2>", "<h3>", "<h4>" };
                StringBuilder sbBioText      = new StringBuilder();
                
                for( int iTag = 1; iTag<_rgTagBag.Count; ++iTag ) {
                    TagInfo oTag   = _rgTagBag[iTag];
                    int     iStart = oLastTag._oMemState.End;
                    int     iEnd   = oTag    ._oMemState.Start - 1;
                    int     iLen   = iEnd - iStart + 1;

                    if( iLen > 0 ) {
                        int j, k=iEnd;
                        for( j=iStart; j<iStart+iLen; ++j ) {
                            if( !Char.IsWhiteSpace( _oStream[j] ) )
                                break;
                        }
                        //for( k=iEnd; k>=j; --k ) {
                        //    if (!Char.IsWhiteSpace( _oStream[k] ) )
                        //        break;
                        //}
                        int iTrim = k - j + 1;
                        if( iTrim > 0 ) 
                            sbBioText.Append( _oStream.SubString( j, iTrim ) );
                    }

                    if( oTag.MarkupType == MARKUPTYPE.ENTITY ) {
                        sbBioText.Append( oTag.Name );
                    }

                    if( rgLineBreakers.Contains( oTag.Name ) &&
                        oTag.MarkupType == MARKUPTYPE.START &&
                        sbBioText.Length > 0 ) 
                    {
                        string strNew = sbBioText.ToString();

                        if( !IsClearText( strNew ) ) {
                            Bio.LineAppend( strNew );
                            if( rgLineBlocks.Contains( oTag.Name ) )
                                Bio.LineAppend( string.Empty );
                            sbBioText.Clear();
                        }
                    }

                    oLastTag = oTag;
                }
            } catch( Exception oEx ) {
                Type[] rgErrors = { typeof( NullReferenceException ),
                                    typeof( ArgumentNullException ),
                                    typeof( ArgumentOutOfRangeException ),
                                    typeof( IndexOutOfRangeException ) };
                if( rgErrors.IsUnhandled( oEx ) )
                    throw;

                Bio.LineAppend( "Data Read Error..." );
            }
        }
    }

    public class ParseQrzHTMLSkimmer : ParseHandlerHTML {
        MorseDoc Document { get; }

        Editor   Address => Document.CallSignAddress;
        Editor   QrzPage => Document.CallSignPageHtml;

        public ParseQrzHTMLSkimmer( MorseDoc oDocument ) : 
            base( oDocument.CallSignPageHtml ) 
        {
            Document = oDocument ?? throw new ArgumentNullException( "Document must not be null" );
        }

        public override void PassTwo() {
            try {
                Address.Clear();

                if ( _rgTagBag.Count < 1 )
                    return;

                TagInfo       oLastTag       = _rgTagBag[0];
                string[]      rgLineBreakers = { "<p>", "<li>", "<br>", "<h1>", "<h2>", "<h3>", "<h4>" };
                string[]      rgLineBlocks   = { "<p>", "<h1>", "<h2>", "<h3>", "<h4>" };
                string[]      rgParaStyles   = { "p8", "p7" };
                StringBuilder sbText         = new StringBuilder();
                DataStream<char> oPageStream = QrzPage.CreateStream();
                
                for( int iTag = 1; iTag<_rgTagBag.Count; ++iTag ) {
                    TagInfo oTag   = _rgTagBag[iTag];
                    int     iStart = oLastTag._oMemState.End;
                    int     iEnd   = oTag    ._oMemState.Start - 1;
                    int     iLen   = iEnd - iStart + 1;

                    if( iLen > 0 ) {
                        int j, k=iEnd;
                        for( j=iStart; j<iStart+iLen; ++j ) {
                            if( !Char.IsWhiteSpace( _oStream[j] ) )
                                break;
                        }
                        int iTrim = k - j + 1;
                        if( iTrim > 0 ) 
                            sbText.Append( _oStream.SubString( j, iTrim ) );
                    }

                    if( oTag.MarkupType == MARKUPTYPE.ENTITY ) {
                        sbText.Append( oTag.Name );
                    }

                    string strAttrib = oTag.GetAttributeValue(  oPageStream, "style" );

                    if( rgLineBreakers.Contains( oTag.Name ) &&
                        oTag.MarkupType == MARKUPTYPE.START &&
                        rgParaStyles.Contains( strAttrib ) &&
                        sbText.Length > 0 ) 
                    {
                        string strNew = sbText.ToString();

                        if( !IsClearText( strNew ) ) {
                            Address.LineAppend( strNew );
                            if( rgLineBlocks.Contains( oTag.Name ) )
                                Address.LineAppend( string.Empty );
                            sbText.Clear();
                        }
                    }

                    oLastTag = oTag;
                }
            } catch( Exception oEx ) {
                Type[] rgErrors = { typeof( NullReferenceException ),
                                    typeof( ArgumentNullException ),
                                    typeof( ArgumentOutOfRangeException ),
                                    typeof( IndexOutOfRangeException ) };
                if( rgErrors.IsUnhandled( oEx ) )
                    throw;

                Address.LineAppend( "Data Read Error..." );
            }
        }
    }
}
